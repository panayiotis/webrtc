'use strict'

# The Peer User of the application
class App.User extends Backbone.Model
  
  defaults:
    'host'   : ''
    'port'   : 9000
    'open'   : false
  
  
  # Collection of peers
  peers: null
  
  # content model
  content: null
  
  # The id on the signalling server
  id: null
  
  # The username chosen by user
  username: null
  
  # The connection to the server
  connection: null
  
  # the group the user belongs
  group: null
  
  # ### Initialization
  #
  # * username
  initialize: (username) ->
    # host is the signalling server hostname
    # by default it is set to window.location.hostname
    @set('host', window.location.hostname)
    
    # username must be chosen by user on initialization,
    # 'anon' is the default
    @username = username or 'anon'
    
    # id is generated by username and a random string
    # e.g. alice-wepjeubx1or
    @id= @username + '-' + Math.random().toString(36).substring(7)
    
    # content model must be created with id set in order
    # to retrieve a content model with the same id from LocalStorage
    @content= new App.Content(id:@id.charCodeAt(0))
    
    # fetch content from LocalStorage
    @content.fetch()
    
    # if the user has no content stored in LocalStorage
    # a default newcontent template is loaded
    # In order for this template to load correctly and lot uglified
    # options object n module
    # connect-assets/node_modules/mincer/lib/mincer/engines/jade_engine.js
    # must be {pretty: true}
    unless @content.get('content')
      @content.set('content', JST['templates/newcontent'](username:@username))
    
    # initialize peer collection
    @peers = new App.PeerCollection()
    
    # listen to data event that peers trigger and when 'content' is
    # received respond with an object {content: ""}
    this.listenTo this, 'data', (obj) =>
      connection=obj.connection
      data=obj.data
      if (data is 'content')
        console.log "User #{@username}: send content to #{connection.peer}"
        #console.log connection
        connection.send {content: @content.get('content')}
      return
    
    # group property
    #
    # the user registers to a group according to the
    # first fragment of the url path
    @group = Backbone.history.getFragment().split('/')[0]
    
    # connect to signalling server
    @connect()
    
    return
  
  # ### connect
  #
  # connect to signalling server.
  # It is called upon initialization.
  connect: ->
    # just exit if browser is phantomjs
    # it is used in tests
    return if phantom
    
    # connection is a peerjs server connection object
    @connection = new PeerJS( @id,
      debug: 1 # 1: Errors, 2: Warnings, 3: All logs
      host: @get('host')
      port: @get('port')
      path: '/peerjs'
      key: @group
    )
    
    # listen to open event
    @connection.on 'open', (id) =>
      @set('open', true)
      @peers.server = @connection
      @discover()
    
    # listen to close event
    @connection.on 'close', =>
      @set('open', false)
    
    # listen to disconnected event
    @connection.on 'disconnected', =>
      @set('open', false)
    
    # listen to connection event
    # it is trigger when an incomming connection is established.
    @connection.on 'connection', (conn) =>
      
      #triggers a 'connection' event
      this.trigger('connection', { server:this, connection:conn } )
      console.log "User #{@username}: incomming connection from #{conn.peer}"
      conn.on 'data', (data) =>
        #trigger a 'data' event
        this.trigger('data', {connection:conn, data:data} )
        console.log "User #{@username}: data from #{conn.peer}"
      
      
      
  # ### reconnect
  #
  # reconnect to signalling server
  reconnect: ->
    @connection.reconnect()

  # ### discover
  #
  # requests a list of peers from the server and triggers an
  # 'availablePeers' event with the server's response.
  # Server's response is actually an array of peer ids
  #
  # Important
  #
  # To support groups and discovey a modification in function app._checkKey in
  # node_modules/peer/lib/server.js has to be made
  discover: =>
    @connection.listAllPeers (res) =>
      this.trigger('availablePeers', res)
